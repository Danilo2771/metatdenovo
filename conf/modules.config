/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CAT_FASTQ {
        publishDir = [
            enabled: false
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            enabled: false
        ]
    }

    withName: TRIMGALORE {
        ext.args = [
            '--fastqc',
            params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/trimgalore/fastqc" },
                mode: 'copy',
                pattern: "*.{html,zip}"
            ],
            [
                path: { "${params.outdir}/trimgalore" },
                mode: 'copy',
                pattern: "*.txt"
            ]
        ]
    }

    withName: SEQTK_MERGEPE {
        ext.prefix = { "${meta.id}.processed" }
        publishDir = [
            enabled: false
        ]
    }

    withName: BBMAP_BBNORM {
        ext.args = [
            params.bbnorm_target ? "target=${params.bbnorm_target}" : '',
            params.bbnorm_min    ? "min=${params.bbnorm_min}" : '',
        ].join(' ').trim()
        publishDir = [
            [
                path : { "${params.outdir}/bbmap/bbnorm/logs" },
                mode : 'copy',
                pattern: "*.log"
            ],
            [
                path : { "${params.outdir}/bbmap/bbnorm/"},
                mode : 'copy',
                pattern: "*.fastq.gz",
                enabled: params.save_bam
            ]
        ]
    }

    withName: MEGAHIT_INTERLEAVED {
        publishDir = [
            path: { "${params.outdir}/megahit" },
            mode: 'copy',
            pattern: '**/*.{gz,log}'
        ]
    }

    withName: WRITESPADESYAML {
        publishDir = [
            path: { "${params.outdir}/rnaspades" },
            mode: 'copy',
            pattern: '*.yaml'
        ]
    }

    withName: SPADES {
        ext.args = "--rna"
        publishDir = [
            path: { "${params.outdir}/rnaspades" },
            mode: 'copy',
            pattern: '*.{gz,log}'
        ]
    }

    withName: FORMATSPADES {
        publishDir = [
            enabled: false
        ]
    }

    withName: BBMAP_INDEX {
        publishDir = [
            enabled: false
        ]
    }

    withName: BBMAP_ALIGN {
        ext.args = "trimreaddescriptions=t pigz=t"
        publishDir = [
            [
                path: { "${params.outdir}/bbmap/bam" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: params.save_bam
            ],
            [
                path: { "${params.outdir}/bbmap/logs" },
                mode: 'copy',
                pattern: "*.log"
            ]
        ]
    }

    withName: SAMTOOLS_SORT {
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: PRODIGAL {
        ext.args = params.prodigal_trainingfile ? "-t $params.prodigal_trainingfile" : "-p meta"
        publishDir = [
            path: { "${params.outdir}/prodigal" },
            mode: 'copy',
            pattern: "*.gz"
        ]
    }

    withName: FORMAT_PRODIGAL_GFF {
        publishDir = [
            path: { "${params.outdir}/prodigal" },
            mode: 'copy',
            pattern: "*.gz"
        ]
    }

    withName: LONGORF {
        publishDir = [
            enabled: false
        ]
    }

    withName: PREDICT {
        publishDir = [
            path: { "${params.outdir}/transdecoder" },
            mode: 'copy',
            pattern: "*.transdecoder.*"
        ]
    }

    withName: 'PROKKA' {
        ext.args = '--prodigal --metagenome'
        publishDir = [
            enabled: false
        ]
    }

    withName: 'FAA_CAT' {
        ext.prefix = 'prokka.faa.gz'
        publishDir = [
            path: { "${params.outdir}/prokka" },
            mode: 'copy',
            pattern: "*.gz"
        ]
    }

    withName: 'FNA_CAT' {
        ext.prefix = 'prokka.fna.gz'
        publishDir = [
            path: { "${params.outdir}/prokka" },
            mode: 'copy',
            pattern: "*.gz"
        ]
    }

    withName: 'GFF_CAT' {
        ext.prefix = 'prokka.gff.gz'
        publishDir = [
            path: { "${params.outdir}/prokka" },
            mode: 'copy',
            pattern: "*.gz"
        ]
    }

    withName: PROKKAGFF2TSV {
        publishDir = [
            path: { "${params.outdir}/summary_tables" },
            mode: 'copy',
            pattern: "*.annotations.tsv.gz"
        ]
    }

    withName: '.*:FEATURECOUNTS_CDS' {
        ext.args = '-g ID -t CDS -F gtf'
        publishDir = [
            path: { "${params.outdir}/featurecounts" },
            mode: 'copy',
            pattern: "*.featureCounts.*"
        ]
    }

    withName: COLLECT_FEATURECOUNTS {
        publishDir = [
            path: { "${params.outdir}/summary_tables" },
            mode: 'copy',
            pattern: "*.gz"
        ]
    }

    withName: 'HMMRANK' {
        publishDir = [
            path: { "${params.outdir}/summary_tables" },
            mode: 'copy',
            pattern: "*.tsv.gz"
        ]
    }

    withName: EGGNOG_DOWNLOAD {
        publishDir = [
            [
                path: { "${params.eggnog_dbpath}" },
                mode: 'copy',
                pattern: "*.db"
            ],
            [
                path: { "${params.eggnog_dbpath}" },
                mode: 'copy',
                pattern: "*.pkl"
            ],
            [
                path: { "${params.eggnog_dbpath}" },
                mode: 'copy',
                pattern: "*.dmnd"
            ]
        ]
    }

    withName: EGGNOG_MAPPER {
        publishDir = [
            [
                path: { "${params.outdir}/eggnog" },
                mode: 'copy',
                pattern: "*.emapper.*"
            ],
            [
                path: { "${params.outdir}/summary_tables" },
                mode: 'copy',
                pattern: "*.emapper.tsv.gz"
            ]
        ]
    }

    withName: KOFAMSCAN_SCAN {
        publishDir = [
            path: { "${params.outdir}/summary_tables/" },
            mode: 'copy',
            pattern: "kofamscan.tsv.gz",
            saveAs: { filename -> "${params.assembler}.${params.orf_caller}.${filename}" }
        ]
        publishDir = [
            path: { "${params.outdir}/kofamscan/" },
            mode: 'copy',
            pattern: "kofamscan_output.tsv.gz",
            saveAs: { filename -> "${params.assembler}.${params.orf_caller}.${filename}" }
        ]
    }

    withName: KOFAMSCAN_DOWNLOAD {
        publishDir = [
            enabled: false
        ]
    }

    withName: CAT_DB_GENERATE {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT" },
            mode: params.publish_dir_mode,
            pattern: "*.tar.gz"
        ]
    }

    withName: UNPIGZ_CONTIGS {
        publishDir = [
            enabled: false
        ]
    }

    withName: CAT_CONTIGS {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}/${meta.binner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CAT_SUMMARY {
        ext.prefix = "cat_summary"
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EGGNOG_SUM {
        publishDir = [
            enabled: false
        ]
    }

    withName: SUM_KOFAMSCAN {
        publishDir = [
            enabled: false
        ]
    }

    withNamw: UNPIGZ_GFF {
        publishDir = [
            enables: false
        ]
    }

    withName: EUKULELE_DOWNLOAD {
        ext.when = { db }
        publishDir = [
            path: { "${params.eukulele_dbpath}/" },
            mode: 'copy',
            pattern: "*"
        ]
    }

    withName: EUKULELE_SEARCH {
        publishDir = [
            path: { "${params.outdir}/eukulele" },
            mode: 'copy'
        ]
        ext.args = [
            params.orf_caller == 'transdecoder' ? "--protein_extension .pep" : '',
            params.eukulele_method ? "-m ${params.eukulele_method}" : ''
        ].join(' ').trim()
    }

    withName: FORMAT_TAX {
        publishDir = [
            path: { "${params.outdir}/summary_tables" },
            mode: 'copy',
            pattern: '*.tsv.gz'
        ]
    }

    withName: SUM_TAXONOMY {
        publishDir = [
            enabled: false
        ]
    }

    withName: MERGE_TABLES {
        publishDir = [
            enabled: false
        ]
    }

    withName: COLLECT_STATS {
        publishDir = [
            path: { "${params.outdir}/summary_tables" },
            mode: 'copy',
            pattern: "*.gz"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        ext.args = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: "${params.outdir}/multiqc",
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
